trigger:
- master  # Using 'master' branch as default

pool:
  name: Default  # This must be your self-hosted agent pool name

variables:
  buildConfiguration: 'Release'
  packageVersion: '1.0.0'
  artifactName: 'StringExtensionsLibrary.$(packageVersion).nupkg'

steps:

# Step 1 - Use .NET 8 SDK
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'
    includePreviewVersions: true

# Step 2 - Install NuGet CLI
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet CLI'

# Step 3 - Restore
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Step 4 - Build
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# Step 5 - Pack
- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/StringExtensionsLibrary.csproj'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
    versioningScheme: 'off'

# Step 6 - Debug: Show package file
- script: |
    echo "Files in staging:"
    dir "$(Build.ArtifactStagingDirectory)"
  displayName: 'Debug: Show staging dir after pack'

# Step 7 - Push to Azure Artifacts Feed
- script: |
    echo "Pushing NuGet package to Azure Artifacts..."
    dotnet nuget push "$(Build.ArtifactStagingDirectory)/*.nupkg" \
      --source "https://pkgs.dev.azure.com/jlenis/_packaging/string-extension-feed/nuget/v3/index.json" \
      --api-key AzureDevOps
  displayName: 'Push to Azure Artifacts feed'
  env:
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: >
      {
        "endpointCredentials": [
          {
            "endpoint": "https://pkgs.dev.azure.com/jlenis/_packaging/string-extension-feed/nuget/v3/index.json",
            "username": "azdo",
            "password": "$(NUGET_PAT)"
          }
        ]
      }